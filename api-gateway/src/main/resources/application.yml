server:
  port: 8181

  error:
    path: /error
    whitelabel:
      enabled: false

spring:
  application:
    name: API-GATEWAY

  main:
    web-application-type: reactive

  security:
    enabled: true
    user:
      name: Edureka
      password: password  #$2b$12$tcoaaq3PeqkerTb8OS2t5eTBKZFzrnFPJy.s1Fk8OcIZg0aQvUyeq
      roles: USER, ADMIN

  ##  API GATEWAY CONFIGURATION
  cloud:
    gateway:
      discovery.locator:
        enabled: false
        lowerCaseServiceId: true
      routes:
        - id: BOOK-MICROSERVICE
          uri: lb://BOOK-MICROSERVICE
          predicates:
          - Path=/api/book/**
          - Method=GET,POST,DELETE
          filters:
          - RewritePath=/api(?<segment>/?.*), $\{segment}
          - RedirectTo=302, /error
          - SetPath=/book
          - name: CircuitBreaker
            args:
              name: CircuitBreaker
              fallbackUri: forward:/bookFallBack

        - id: ISSUER-MICROSERVICE
          uri: lb://ISSUER-MICROSERVICE
          predicates:
          - Path=/api/issuer/**
          - Method=GET,POST,DELETE
          filters:
          - RewritePath=/api(?<segment>/?.*), $\{segment}
          - RedirectTo=302, /error
          - SetPath=/issuer
          - name: CircuitBreaker
            args:
              name: CircuitBreaker
              fallbackUri: forward:/issuerFallBack

        - id: OAUTH2-SERVICE
          uri: lb://OAUTH2-SERVICE
          predicates:
          - Path=/api/oauth2/**
          - Method=GET,POST
          filters:
          - RewritePath=/api(?<segment>/?.*), $\{segment}
          - RedirectTo=302, /error
          - SetPath=/oauth2
          - name: CircuitBreaker
            args:
              name: CircuitBreaker
              fallbackUri: forward:/oauth2FallBack

eureka:
  client:
    register-with-eureka: true
    fetch-registry: true
    serviceUrl:
      defaultZone: ${EUREKA_URI:http://localhost:8761/eureka}    #http://localhost:8761/eureka
    healthcheck:
      enabled: true
  instance:
    hostname: localhost

# info endpoints configuration
info:
  app:
    name: ${project.name}
    description: ${project.description}
    version: ${project.version}
    encoding: ${project.build.sourceEncoding}
    java:
      version: ${java.version}

# logging
logging:
  file:
    path:  logs/${spring.application.name}-logs
  level:
    org.springframework.cloud.gateway: DEBUG
    reactor.netty.http.client: DEBUG

management:
  endpoints:
    web:
      exposure:
        include:  [ "health","prometheus","metrics","gateway","hystrix","mappings","traces"] #'*'
      base-path: /actuator
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
    health:
      show-details: always
  metrics:
    export:
      prometheus:
        enabled: true






